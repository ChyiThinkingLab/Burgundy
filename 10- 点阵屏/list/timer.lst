C51 COMPILER V9.01   TIMER                                                                 09/29/2020 10:10:02 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\list\timer.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Timer\timer.c BROWSE INCDIR(.\delay;.\GPIO;.\Timer;.\LED_Display) DEBUG OBJ
                    -ECTEXTEND PRINT(.\list\timer.lst) OBJECT(.\list\timer.obj)

line level    source

   1          #include "timer.h"
   2          
   3          
   4          
   5          
   6          //========================================================================
   7          // 函数: unsigned char  Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
   8          // 描述: 定时器初始化程序.
   9          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
  10          // 返回: 成功返回0, 空操作返回1,错误返回2.
  11          // 版本: V1.0, 2012-10-22
  12          //========================================================================
  13          unsigned char   Timer_Inilize(unsigned char TIM, TIM_InitTypeDef *TIMx)
  14          {
  15   1              if(TIM > Timer2) return 1;      //空操作
  16   1      
  17   1              if(TIM == Timer0)
  18   1              {
  19   2                      TR0 = 0;                //停止计数
  20   2                      if(TIMx->TIM_Interrupt == ENABLE)               ET0 = 1;        //允许中断
  21   2                      else                                                                    ET0 = 0;        //禁止中断
  22   2                      if(TIMx->TIM_Polity == PolityHigh)              PT0 = 1;        //高优先级中断
  23   2                      else                                                                    PT0 = 0;        //低优先级中断
  24   2                      if(TIMx->TIM_Mode >  TIM_16BitAutoReloadNoMask) return 2;       //错误
  25   2                      TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3:
             - 16位自动重装, 不可屏蔽中断
  26   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        AUXR &= ~0x80;  //12T
  27   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         AUXR |=  0x80;  //1T
  28   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        TMOD |=  0x04;  //对外计数或分频
  29   2                      else                                                                            TMOD &= ~0x04;  //定时
  30   2                      if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x01;      //输出时钟
  31   2                      else                                                    INT_CLKO &= ~0x01;      //不输出时钟
  32   2                      
  33   2                      TH0 = (unsigned char)(TIMx->TIM_Value >> 8);
  34   2                      TL0 = (unsigned char)TIMx->TIM_Value;
  35   2                      if(TIMx->TIM_Run == ENABLE)     TR0 = 1;        //开始运行
  36   2                      return  0;              //成功
  37   2              }
  38   1      
  39   1              if(TIM == Timer1)
  40   1              {
  41   2                      TR1 = 0;                //停止计数
  42   2                      if(TIMx->TIM_Interrupt == ENABLE)               ET1 = 1;        //允许中断
  43   2                      else                                                                    ET1 = 0;        //禁止中断
  44   2                      if(TIMx->TIM_Polity == PolityHigh)              PT1 = 1;        //高优先级中断
  45   2                      else                                                                    PT1 = 0;        //低优先级中断
  46   2                      if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2;       //错误
  47   2                      TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
  48   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        AUXR &= ~0x40;  //12T
  49   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         AUXR |=  0x40;  //1T
  50   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        TMOD |=  0x40;  //对外计数或分频
  51   2                      else                                                                            TMOD &= ~0x40;  //定时
  52   2                      if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x02;      //输出时钟
  53   2                      else                                                    INT_CLKO &= ~0x02;      //不输出时钟
C51 COMPILER V9.01   TIMER                                                                 09/29/2020 10:10:02 PAGE 2   

  54   2                      
  55   2                      TH1 = (unsigned char)(TIMx->TIM_Value >> 8);
  56   2                      TL1 = (unsigned char)TIMx->TIM_Value;
  57   2                      if(TIMx->TIM_Run == ENABLE)     TR1 = 1;        //开始运行
  58   2                      return  0;              //成功
  59   2              }
  60   1      
  61   1              if(TIM == Timer2)               //Timer2,固定为16位自动重装, 中断无优先级
  62   1              {
  63   2                      AUXR &= ~(1<<4);        //停止计数
  64   2                      if(TIMx->TIM_Interrupt == ENABLE)                       IE2  |=  (1<<2);        //允许中断
  65   2                      else                                                                            IE2  &= ~(1<<2);        //禁止中断
  66   2                      if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)        return 2;
  67   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)        AUXR &= ~(1<<2);        //12T
  68   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)         AUXR |=  (1<<2);        //1T
  69   2                      if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)        AUXR |=  (1<<3);        //对外计数或分频
  70   2                      else                                                                            AUXR &= ~(1<<3);        //定时
  71   2                      if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x04;      //输出时钟
  72   2                      else                                                    INT_CLKO &= ~0x04;      //不输出时钟
  73   2      
  74   2                      TH2 = (unsigned char)(TIMx->TIM_Value >> 8);
  75   2                      TL2 = (unsigned char)TIMx->TIM_Value;
  76   2                      if(TIMx->TIM_Run == ENABLE)     AUXR |=  (1<<4);        //开始运行
  77   2                      return  0;              //成功
  78   2              }
  79   1              return 2;       //错误
  80   1      }
  81          
  82          
  83          unsigned char timer0 = 0, timer1 = 0, timer2 = 0;
  84          /********************* Timer0中断函数************************/
  85          void timer0_int (void) interrupt TIMER0_VECTOR
  86          {
  87   1              if(timer0 >= 200)
  88   1              {
  89   2                      P41 = ~P41;//LD1
  90   2                      timer0 = 0;
  91   2              }
  92   1              
  93   1              timer0++;
  94   1      }
  95          
  96          /********************* Timer1中断函数************************/
  97          void timer1_int (void) interrupt TIMER1_VECTOR
  98          {
  99   1              if(timer1 >= 200)
 100   1              {
 101   2                      P42 = ~P42;//LD2
 102   2                      timer1 = 0;
 103   2              }
 104   1              
 105   1              timer1++;
 106   1      }
 107          
 108          /********************* Timer2中断函数************************/
 109          void timer2_int (void) interrupt TIMER2_VECTOR
 110          {
 111   1              if(timer2 >= 200)
 112   1              {
 113   2                      P43 = ~P43;//LD3
 114   2                      timer2 = 0;
 115   2              }
C51 COMPILER V9.01   TIMER                                                                 09/29/2020 10:10:02 PAGE 3   

 116   1              
 117   1              timer2++;
 118   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    480    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
